--기존 테이블 구조, 데이터 복사
--CREATE TABLE DEPT_COPY AS SELECT * FROM DEPARTMENT;
--DEPARTMENT 모든 데아토 DEPT_COPY에 추가
INSERT INTO DEPT_COPY SELECT * FROM DEPARTMENT;
SELECT COUNT(*) AS "사원의 수" FROM EMPLOYEE;
SELECT COUNT(DISTINCT JOB)
 AS "직업 종류의 갯수" FROM EMPLOYEE;
SELECT DNO AS "부서 번호" ,AVG(SALARY) AS "급여 평균" FROM EMPLOYEE GROUP BY DNO;
SELECT DNO, JOB, COUNT(*), SUM(SALARY) FROM EMPLOYEE GROUP BY DNO, JOB ORDER BY DNO,JOB;
SELECT DNO, MAX(SALARY) FROM EMPLOYEE GROUP BY DNO HAVING MAX( 
SALARY) >= 3000;
SELECT DNO, JOB, COUNT(*), SUM(SALARY) FROM EMPLOYEE GROUP BY DNO, JOB ORDER BY DNO,JOB;
--각 사원들의 근무한 개월 수 구하기
--소수점 단위 절삭
SELECT ENAME, SYSDATE, HIREDATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE))FROM EMPLOYEE;
--ROUND: 반올림 처리
SELECT ROUND(SYSDATE-HIREDATE) AS "근무일수" FROM EMPLOYEE;
SELECT DNO, MAX(SALARY) FROM EMPLOYEE GROUP BY DNO HAVING MAX(SALARY) >=3000;
--입사한지 6개월 지난 사원; ADD_MONTHS(date, N)-DATE에 N 개월을 더함
SELECT ENAME, HIREDATE, ADD_MONTHS(HIREDATE, 6) FROM EMPLOYEE;
--To_CHAR- 날짜, 숫자 문자로 치환
SELECT ENAME,HIREDATE,TO_CHAR(HIREDATE, 'YY-MM'),
TO_CHAR(HIREDATE,'YYY/MM/DD DAY') FROM EMPLOYEE;
--DUAL: 간단하게 함수를 이용해서 계산 결과값을 확인할떄 사용하는 단순 테이블
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD, HH24:MI:SS') FROM DUAL;
--통화기호 
SELECT ENAME, TO_CHAR(SALARY, 'L999,999')FROM EMPLOYEE;
SELECT ENAME, HIREDATE FROM EMPLOYEE WHERE HIREDATE=TO_DATE(19810220, 'YYYYMMDD');
--CASE 사용하여 부서명출력
SELECT ENAME ,DNO,
 CASE WHEN DNO=20 THEN 'ACCOUNTING'
 WHEN DNO=20 THEN 'RESEARCH'
 WHEN DNO=30 THEN 'SALES'
 WHEN DNO=40 THEN 'OPERATIONS'
 ELSE 'DEFAULT'
 END AS "부서명"
 FROM EMPLOYEE ORDER BY DNO;
 --DECODE(표현식 조건N, 결과N, ... 기본 결과): 조건/ 결과에 맞으면 기본결과 출력
 --직급이 'ANALYST' , 사원은 200, 'SALESMAN' 사원은 180..)
SELECT ENO, ENAME ,JOB, SALARY, DECODE(JOB, 'ANALYST', SALARY +200,'SALESMAN', SALARY+180,
'MANAGER', SALARY+150,
'CLERK', SALARY+100,
SALARY) AS "보너스 지급" FROM EMPLOYEE;

--부서명, 지역명, 사원수, 모든 사원의 평균 급여 출력, 평균 소숫점 한자리수까지만 출력
SELECT DECODE(DNO, 10, 'ACCOUNTING',
        20, 'RESEARCH',
        30, 'SALES',
        40, 'OPERATIONS') AS "부서명",
DECODE(DNO, 10, 'NEWYORK',
            20, 'DALLAS',
            30, 'CHICAGO',
            40, 'BOSTON') AS "지역",
            COUNT(*) AS "사원수", ROUND(AVG(SALARY))AS "평균급여" FROM EMPLOYEE GROUP BY DNO;
--JOIN 테이블 별칭 사용
SELECT E.ENO, E.ENAME, D.DNAME, E.DNO FROM EMPLOYEE E, DEPARTMENT D WHERE E.DNO=D.DNO AND
E.ENO=7788;
--USING 사용 INNERJOIN
SELECT E.ENO, E.ENAME, D.DNAME, DNO FROM EMPLOYEE E JOIN DEPARTMENT D USING(DNO)
WHERE E.ENO=7788;
--ON 사용 INNERJOIN
SELECT E.ENO, E.ENAME, D.DNAME, E.DNO FROM EMPLOYEE E JOIN DEPARTMENT D ON E.DNO=D.DNO WHERE E.ENO=7788;
--3개 테이블 JOIN
SELECT E.ENAME, D.DNAME, E.SALARY, S.GRADE FROM EMPLOYEE E, DEPARTMENT D, SALGRADE S
WHERE E.DNO=D.DNO AND SALARY BETWEEN LOSAL AND HISAL;
 --NATURAL JOIN : 공통 칼럼에 대해서 조인처리
 SELECT E.ENO, E.ENAME, D.DNAME, DNO FROM EMPLOYEE E NATURAL JOIN DEPARTMENT D WHERE E.ENO=7788;
 --SELF JOIN : 자신의 테이블 조인
 SELECT E.ENAME AS "사원", M.ENAME AS "직속상관" FROM EMPLOYEE E LEFT OUTER JOIN EMPLOYEE M
 ON E.MANAGER =M.ENO;
 --LEFT OUTER JOIN : 왼쪽 테이블에 NULL값 존재
 SELECT E.ENAME AS "사원", M.ENAME AS "직속상관"
 FROM EMPLOYEE E LEFT OUTER JOIN EMPLOYEE M ON E.MANAGER = M.ENO;
 --이름에 'A' 가 포함된 모든 사원과 부서, 자연 조인
 SELECT E.ENAME, D.DNAME FROM EMPLOYEE E NATURAL JOIN DEPARTMENT D WHERE DNO IN(10,20,30,40) AND E.ENAME
 LIKE '%A%';
 --EQUI JOIN(오라클 9i 이전방식)
 SELECT E.ENAME, D.DNAME FROM EMPLOYEE E, DEPARTMENT D WHERE E.DNO=D.DNO AND E.ENAME LIKE '%
 A%';
 --서버 쿼리: WHERE~~ = 형태: 스콕과 같은 넘버 가진 사원의 이름과 번호를 가져오기
 SELECT ENAME, DNO FROM EMPLOYEE WHERE DNO =(SELECT DNO FROM EMPLOYEE WHERE ENAME='SCOTT');
 --부하 직원이 없는 사원
 SELECT ENAME FROM EMPLOYEE WHERE DNO=(SELECT ENO FROM EMPLOYEE WHERE MANAGER IS NULL);
 --RESEARCH에서 근무하는 사원
 SELECT DNO,ENAME, JOB FROM EMPLOYEE WHERE DNO=(SELECT DNO FROM DEPARTMENT WHERE DNAME ='ACCOUNTING');
 --최소 급여를 받는 사원번호와 이름 출력; <> 같지 않다
 SELECT ENO, ENAME FROM EMPLOYEE WHERE SALARY IN(SELECT MIN(SALARY)FROM EMPLOYEE GROUP BY DNO);
 
 --직급이 SALESMAN이 아니면서 급여가 임의의 SALESMAN 보다 낮은 사원을 출력
 SELECT ENO,ENAME, JOB, SALARY FROM EMPLOYEE
 WHERE SALARY < ANY (SELECT SALARY FROM EMPLOYEE WHERE JOB='SALESMAN') AND JOB <> 'SALESMAN';
 
 --직급이 SALESMAN이 아니면서 급여가 SALESMAN인 사원보다 급여가 적은 사원을 모두 출력
 SELECT ENO, ENAME, JOB, SALARY FROM EMPLOYEE
 WHERE SALARY < ALL(SELECT SALARY FROM EMPLOYEE WHERE JOB='SALESMAN') AND JOB <>'SALESMAN';
 --10번 부서의 지역명을 20번 부서의 지역명으로 변경
 UPDATE DEPT_COPY SET LOC=(SELECT LOC FROM DEPT_COPY WHERE DNO=20) WHERE DNO=10;
 
 
